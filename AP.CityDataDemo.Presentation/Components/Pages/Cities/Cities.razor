@page "/cities"
@rendermode InteractiveServer
@using AP.CityDataDemo.Application.CQRS.Commands.Cities
@using AP.CityDataDemo.Application.CQRS.Queries.Countries
@using AP.CityDataDemo.Domain
@using AP.MyGameStore.Application.CQRS.Queries.Cities
@using MediatR

<h3>Cities</h3>

@if (CitiesList == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (!CitiesList.Any())
{
    <div class="alert alert-info">No cities found.</div>
}
else
{
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Country</th>
                <th>Population</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var city in CitiesList)
            {
                <tr>
                    <td>@city.Name</td>
                    <td>@city.Country.Name</td>
                    <td>@city.Population</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => ShowEditPopup(city)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@* Modal for editing city (always outside the table/logic blocks) *@
@if (IsEditPopupVisible && SelectedCity != null)
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit City</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditPopup" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input class="form-control" @bind="SelectedCity.Name" disabled />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Population</label>
                        <input type="number" class="form-control" @bind="SelectedCity.Population" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Country</label>
                        <select class="form-select" @bind="SelectedCity.CountryId">
                            <option value="">Select a country</option>
                            @if (CountriesList != null)
                            {
                                foreach (var country in CountriesList)
                                {
                                    <option value="@country.Id">@country.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseEditPopup">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveEdit">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@inject IMediator Mediator

@code {
    public IEnumerable<City> CitiesList = new List<City>();
    public IEnumerable<Country> CountriesList = new List<Country>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        CitiesList = await Mediator.Send(new GetAllCitiesQuery { PageNr = 1, PageSize = 10 });
        CountriesList = await Mediator.Send(new GetAllCountriesQuery { PageNr = 1, PageSize = 100 });
    }

    public bool IsEditPopupVisible { get; set; } = false;

    public City? SelectedCity { get; set; }

    public void ShowEditPopup(City city)
    {
        // Create a copy to avoid editing the list directly until save
        SelectedCity = new City
        {
            Id = city.Id,
            Name = city.Name,
            Population = city.Population,
            CountryId = city.CountryId,
            Country = city.Country
        };
        IsEditPopupVisible = true;
    }

    public void CloseEditPopup()
    {
        IsEditPopupVisible = false;
        SelectedCity = null;
    }

    public async Task SaveEdit()
    {
        if (SelectedCity != null)
        {
            // Send EditCityCommand via Mediator
            var command = new EditCityCommand(
                SelectedCity.Id,
                SelectedCity.Name,
                SelectedCity.Population,
                SelectedCity.CountryId
            );
            await Mediator.Send(command);
            IsEditPopupVisible = false;
            SelectedCity = null;
            // Optionally refresh the list
            CitiesList = await Mediator.Send(new GetAllCitiesQuery { PageNr = 1, PageSize = 10 });
        }
    }
}