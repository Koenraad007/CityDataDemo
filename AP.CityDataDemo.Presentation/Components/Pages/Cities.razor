@page "/cities"
@using AP.CityDataDemo.Application.DTOs
@using AP.CityDataDemo.Application.Services
@using AP.CityDataDemo.Application.Exceptions
@using FluentValidation
@inject ICityService CityService
@rendermode InteractiveServer

<PageTitle>Steden</PageTitle>

<h1>Steden Overzicht</h1>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="mb-3">
            <button class="btn btn-primary me-2" @onclick="() => SortByPopulation(false)">
                Sorteer op Inwoners (Laag → Hoog)
            </button>
            <button class="btn btn-primary" @onclick="() => SortByPopulation(true)">
                Sorteer op Inwoners (Hoog → Laag)
            </button>
        </div>
    </div>
    <div class="col-md-6">
        <button class="btn btn-success" @onclick="ToggleAddForm">
            @if (showAddForm)
            {
                <span>➖ Verberg Formulier</span>
            }
            else
            {
                <span>➕ Stad Toevoegen</span>
            }
        </button>
    </div>
</div>

@if (showAddForm)
{
    <div class="row mb-4">
        <div class="col-md-8">
            <AddCityForm OnCityAdded="OnCityAdded" />
        </div>
    </div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (cities == null)
{
    <p><em>Laden...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Stad</th>
                <th>Land</th>
                <th>Aantal Inwoners</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var city in cities)
            {
                <tr>
                    <td>@city.Name</td>
                    <td>@city.CountryName</td>
                    <td>@city.Population.ToString("N0")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<CityDto>? cities;
    private string? errorMessage;
    private bool showAddForm = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cities = await CityService.GetAllCitiesAsync();
        }
        catch (Exception)
        {
            errorMessage = "Sorry, we could not load the city data at this time.";
        }
    }

    private async Task SortByPopulation(bool descending)
    {
        try
        {
            cities = await CityService.GetCitiesSortedByPopulationAsync(descending);
            errorMessage = null;
        }
        catch (Exception)
        {
            errorMessage = "Sorry, we could not sort the city data at this time.";
        }
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
    }

    private async Task OnCityAdded()
    {
        showAddForm = false;
        await LoadCities();
    }

    private async Task LoadCities()
    {
        try
        {
            cities = await CityService.GetAllCitiesAsync();
            errorMessage = null;
        }
        catch (Exception)
        {
            errorMessage = "Sorry, we could not load the city data at this time.";
        }
    }
}
