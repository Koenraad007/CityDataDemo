@page "/cities"
@using AP.CityDataDemo.Application.CQRS.Commands.Cities
@using AP.CityDataDemo.Application.CQRS.Queries.Cities
@using AP.CityDataDemo.Application.CQRS.Queries.Countries
@using AP.CityDataDemo.Application.DTOs
@using AP.CityDataDemo.Application.Exceptions
@using AP.CityDataDemo.Application.Services
@using AP.CityDataDemo.Domain
@using AP.MyGameStore.Application.CQRS.Queries.Cities
@using FluentValidation
@using MediatR
@inject IMediator Mediator
@rendermode InteractiveServer

<PageTitle>Cities</PageTitle>

<h1>Cities Overview</h1>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="mb-3">
            <button class="btn btn-primary me-2" @onclick="() => SortByPopulation(false)">
                Sort by Population (Low → High)
            </button>
            <button class="btn btn-primary" @onclick="() => SortByPopulation(true)">
                Sort by Population (High → Low)
            </button>
        </div>
    </div>
    <div class="col-md-6">
        <button class="btn btn-success" @onclick="ToggleAddForm">
            @if (showAddForm)
            {
                <span>➖ Hide Form</span>
            }
            else
            {
                <span>➕ Add City</span>
            }
        </button>
    </div>
</div>

@if (showAddForm)
{
    <div class="row mb-4">
        <div class="col-md-8">
            <AddCityForm OnCityAdded="OnCityAdded" />
        </div>
    </div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (cities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>City</th>
                <th>Country</th>
                <th>Population</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var city in cities)
            {
                <tr>
                    <td>@city.Name</td>
                    <td>@city.CountryName</td>
                    <td>@city.Population.ToString("N0")</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => ShowEditPopup(city)">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCity(city.Id)">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@* Modal for editing city *@
@if (IsEditPopupVisible && SelectedCity != null)
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit City</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditPopup" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @* Show errors here *@
                    @if (ValidationErrors.Any())
                    {
                        <div class="alert alert-danger">
                            <ul class="mb-0">
                                @foreach (var error in ValidationErrors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input class="form-control" @bind="SelectedCity.Name" disabled />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Population</label>
                        <input type="number" class="form-control" @bind="SelectedCity.Population" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Country</label>
                        <select class="form-select" @bind="SelectedCity.CountryId" required>
                            @if (CountriesList != null)
                            {
                                foreach (var country in CountriesList)
                                {
                                    <option value="@country.Id">@country.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseEditPopup">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveEdit">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public IEnumerable<Country> CountriesList { get; set; } = new List<Country>();
    public List<string> ValidationErrors { get; set; } = new();
    private IEnumerable<CityDto>? cities;
    private string? errorMessage;
    private bool showAddForm = false;
    private EmailService emailService = new EmailService();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cities = await Mediator.Send(new GetAllCitiesQuery());
            StateHasChanged();
            CountriesList = await Mediator.Send(new GetAllCountriesQuery());
        }
        catch (Exception)
        {
            errorMessage = "Sorry, we could not load the city data at this time.";
        }
    }

    private async Task SortByPopulation(bool descending)
    {
        try
        {
            cities = await Mediator.Send(new GetCitiesSortedByPopulationQuery(descending));
            errorMessage = null;
        }
        catch (Exception)
        {
            errorMessage = "Sorry, we could not sort the city data at this time.";
        }
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
    }

    private async Task OnCityAdded()
    {
        showAddForm = false;
        await LoadCities();
    }

    private async Task LoadCities()
    {
        try
        {
            cities = await Mediator.Send(new GetAllCitiesQuery());
            errorMessage = null;
        }
        catch (Exception)
        {
            errorMessage = "Sorry, we could not load the city data at this time.";
        }
    }

    public bool IsEditPopupVisible { get; set; } = false;

    public City? SelectedCity { get; set; }
    public void ShowEditPopup(CityDto city)
    {
        SelectedCity = new City
        {
            Id = city.Id,
            Name = city.Name,
            Population = (int)city.Population,
            CountryId = city.CountryId != 0 ? city.CountryId : (CountriesList.FirstOrDefault()?.Id ?? 0),
            Country = null
        };
        IsEditPopupVisible = true;
    }

    public void CloseEditPopup()
    {
        IsEditPopupVisible = false;
        SelectedCity = null;
    }

    public async Task SaveEdit()
    {
        ValidationErrors.Clear();
        if (SelectedCity != null && SelectedCity.CountryId != 0)
        {
            var command = new EditCityCommand(
                SelectedCity.Id,
                SelectedCity.Name,
                SelectedCity.Population,
                SelectedCity.CountryId
            );
            try
            {
                await Mediator.Send(command);
                IsEditPopupVisible = false;
                SelectedCity = null;
                cities = await Mediator.Send(new GetAllCitiesQuery());
            }
            catch (FluentValidation.ValidationException ex)
            {
                ValidationErrors = ex.Errors.Select(e => e.ErrorMessage).ToList();
            }
        }
    }

    public async Task DeleteCity(int cityId)
    {
        if (cityId != 0)
        {
            var city = cities?.FirstOrDefault(c => c.Id == cityId);
            var command = new DeleteCommand(cityId);
            try
            {
                await Mediator.Send(command);
                cities = await Mediator.Send(new GetAllCitiesQuery());

                // Send email notification
                await emailService.SendEmailAsync("koenvanaken1999@gmail.com",
                    "City Deleted",
                    $"The city with name {city!.Name} has been deleted.");
            }
            catch (Exception e)
            {
                if (e.GetType() == typeof(FluentValidation.ValidationException))
                {
                    var ex = (FluentValidation.ValidationException)e;
                    errorMessage = string.Join("; ", ex.Errors.Select(err => err.ErrorMessage));
                    return;
                }

                errorMessage = "Sorry, we could not delete the city at this time.";
            }
        }
    }
}
